%article.type-system-sans
  %section
    .half.dash
      #speedo
        %canvas#gauge
      / ko if: vehicle
      / ko with: vehicle().speedo
      %img#badge(data-bind="attr: {src: warningBadgeUrl}, style: {opacity: warningBadgeUrl() ? 1 : 0}")
      / /ko
      / /ko
    .half.stat
      #pad
        #map
        / ko if: vehicle
        / ko with: vehicle().speedo
        #speed-limit(data-bind="text: speedLimit")
        / /ko
        %table
          %tr
            %th Lat/Lng
            %td(data-bind="text: vehicle().lat() + ', ' + vehicle().lng()")
          %tr
            %th Speed (mph)
            %td(data-bind="text: vehicle().speedo.currentSpeed()")
          %tr
            %th Temperature (Â°C)
            %td(data-bind="text: vehicle().speedo.temp")
          %tr
            %th Rain Intensity (%)
            %td(data-bind="text: vehicle().speedo.rainIntensity")
          %tr
            %th Blackspot?
            %td(data-bind="text: vehicle().speedo.nearBlackspot() ? 'true' : 'false'")
        / /ko

:coffeescript
  $ ->
    lazyload "App", (App) ->
      window.app = new App()
      ko.applyBindings app

      window.bmw.token (error, result) ->
        if error
          console.log error
        else
          app.loadUser result.UserId
          app.loadVehicle().done (v) ->
            gmaps = new GMaps({
              el: '#map',
              lat: v.lat(),
              lng: v.lng(),
              panControl: false,
              streetViewControl: false,
              mapTypeControl: false,
              overviewMapControl: false
            })

            image = {
              url: "assets/bmw.png",
              size: new google.maps.Size(30, 30),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(15, 15)
            }

            marker = new google.maps.Marker({
              position: {lat: v.lat(), lng: v.lng()},
              icon: image,
              map: gmaps.map
            })

            v.location.subscribe ->
              lat = v.lat()
              lng = v.lng()
              h = {lat: lat, lng: lng}
              marker.setPosition(h)
              gmaps.map.panTo(h)

            setTimeout ->
              blackSpots = #{BlackSpotService.lat_lngs.to_json}
              for bs in blackSpots
                opts =
                  strokeColor: '#FF0000',
                  strokeOpacity: 0.8,
                  strokeWeight: 2,
                  fillColor: '#FF0000',
                  fillOpacity: 0.35,
                  map: gmaps.map,
                  center: bs,
                  radius: 100
                new google.maps.Circle(opts)
            , 0
